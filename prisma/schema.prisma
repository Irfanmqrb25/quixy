// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?  @unique
  description     String?
  email           String   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isFeatured      Boolean  @default(false)

  accounts         Account[]
  likes            Like[]
  posts            Post[]
  comments         Comment[]
  notifications    Notification[]
  
  followers        Follow[] @relation("FollowTo")
  following        Follow[] @relation("FollowFrom")

  conversationIds String[] @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds  String[] @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  messages        Message[]

  // notificationsCreatedBy    Notification[] @relation("CreatedBy")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  caption          String
  images           Image[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes            Like[]   
  comments         Comment[]
  
  // notifications    Notification[]
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  postId      String   @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  url         String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId])
}


model Like {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  postId           String   @db.ObjectId
  userId           String   @db.ObjectId

  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  postId           String   @db.ObjectId
  text             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  follower        User      @relation("FollowFrom", fields: [followerId], references: [id], onDelete: Cascade)
  followerId      String    @db.ObjectId
  following       User      @relation("FollowTo", fields: [followingId], references: [id], onDelete: Cascade)
  followingId     String    @db.ObjectId
}
 
model Notification {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  type            String
  body            String 
  seen            Boolean   @default(false)
  userId          String    @db.ObjectId
  createdAt       DateTime  @default(now())

  avatar          String?
  createdByName   String 
  createdById     String
  images          String?
  postId          String?   

  user            User      @relation(fields: [userId], references:[id], onDelete: Cascade)

  // createdById     String    @db.ObjectId
  // postId          String?   @db.ObjectId

  // post            Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  // createdBy       User      @relation("CreatedBy", fields: [createdById], references:[id], onDelete: Cascade)
}

model Conversation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt   DateTime @default(now())
  name            String?
  isGroup         Boolean?
  
  messagesIds     String[] @db.ObjectId
  messages        Message[]

  userIds         String[] @db.ObjectId
  users           User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  body            String?
  image           String?
  createdAt       DateTime @default(now())

  seenIds         String[] @db.ObjectId
  seen            User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId  String @db.ObjectId
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId        String @db.ObjectId
  sender          User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}